import functools

from flask import (
    Blueprint,
    request,
    jsonify
)
from flask.views import MethodView
from flask_jwt_extended import (
    create_access_token,
    current_user,
    jwt_required
)

from simple_crud_api.database import db_session
from ..models.user import User
from ..models.address import Address
from ..serializer import (
    UserRegisterSerializer, 
    UserLoginSerializer,
    UserProfileSerializer
)

from ..utils.user import UserType
from ..utils.message import message_collector
from ..utils.models import get_fields

bp = Blueprint("auth_user", __name__, url_prefix="/api/user")


class RegisterView(MethodView):
    init_every_request = False
    
    def __init__(self, model):
        self.model: User = model
        
    def check_user_exists(self, username: str) -> bool:
        query = db_session.query(User).where(self.model.username==username).all()
        if len(query) > 0:
            return True
        return False
    
    def get_user_type(self, value):
        """
        Return appropriate User roles
        """
        if UserType.Employee.value == value:
            return UserType.Employee
        if UserType.TeamLead.value == value:
            return UserType.TeamLead
        if UserType.Manager.value == value:
            return UserType.Manager
        return 0
    
    def post(self):
        try:
            serializer = UserRegisterSerializer(**request.json)
        except (AttributeError, TypeError) as e:
            # generated by serialier
            return jsonify(message="Invalid fields username, role"), 400
        
        # check user existence
        if self.check_user_exists(serializer.username):
            return jsonify(message="User name taken"), 302
        
        # check password length
        if len(serializer.password) < 8:
            return jsonify(message="Password must be atleast digit"), 400
        
        # check user role
        user_role = self.get_user_type(serializer.role)
        if not user_role:
            return jsonify(message="Invalid user role."), 400
        
        # add user
        user = self.model(
            username=serializer.username, 
            password=User.make_passsword(serializer.password),
        )
        user.role = user_role
        db_session.add(user)
        db_session.commit()
        
        return jsonify(message="User created successfully"), 201
    
class LoginView(MethodView):
    def __init__(self, model):
        self.model = model
        
    def post(self):
        
        try:
            serializer = UserLoginSerializer(**request.json)
        except (AttributeError, TypeError) as e:
            # generated by serialier
            return jsonify(message="Required username and password"), 400
        
        # get user
        user = db_session.query(User).filter(User.username==serializer.username).one_or_none()
        if not user or not user.active:
            return jsonify(message="User not found"), 404
        
        if not user.check_password(serializer.password):
            return jsonify(message="Invalid username and password"), 400
        
        access_token = create_access_token(identity=user)
        return jsonify({"access_token": access_token}), 200


def register_api(app: Blueprint, model: User, name: str, view_class=None):
    app.add_url_rule(f'/{name}', view_func=view_class.as_view(f"user-{name}", model))
        

register_api(bp, User, 'register', RegisterView)
register_api(bp, User, 'login', LoginView)


@bp.route("", methods=["GET"])
@jwt_required()
def user_detail_view():
    return jsonify(details=current_user.as_dict())




@bp.route("/profile", methods=["POST"])
@jwt_required()
def update_profile():
    """
    All the fields are required for profile endpoints.
    
    All non-optional fields are required from User and Address models.
    """
    messages = message_collector(only_list=True)
    try:
        serializer = UserProfileSerializer(**request.json)
    except (AttributeError, TypeError) as e:
        messages("Invalid user details")
        messages(str(e))
        return jsonify(message=messages()), 400
    
    # removed address
    address_details = serializer.address
    print(f"\n\n{address_details}\n\n")
    
    # return error if any of the fields is None
    keys: list = list(serializer.__dict__.keys())
    keys.remove("address")
    for k in keys:
        value = getattr(serializer, k, None)
        if value is None:
            messages("All fields are required. Fields (%s)" % ', '.join([k for k in keys]))
            return jsonify(message=messages()), 400
        setattr(current_user, k, value)
        
    db_session.add(current_user)
    db_session.commit()
    
    # update details
    if address_details:
        address_fields = get_fields(Address)
        for x in ['id', "user_id"]:
            address_fields.remove(x)
        try:
            address = Address(
                line1=address_details['line1'],
                city=address_details['city'],
                state=address_details['state'],
                country=address_details['country'],
                pincode=address_details['pincode']
            )
        except Exception as e:
            messages("required fields in addesss (%s)" % ", ".join(address_fields))
            return jsonify(message=messages()), 400
        address.user_id = current_user.id
        db_session.add(address)
        db_session.commit()
    
    # build response
    data = current_user.as_dict()
    if address_details:
        data['address'] = address.to_dict()
    return jsonify(details=data), 202
