import functools

from flask import (
    Blueprint,
    request,
    jsonify
)
from flask.views import MethodView

from simple_crud_api.database import db_session
from ..models.user import User
from ..models.address import Address
from ..serializer import UserRegisterSerializer

from ..utils.user import UserType

bp = Blueprint("auth_user", __name__, url_prefix="/api/user")


class RegisterView(MethodView):
    init_every_request = False
    
    def __init__(self, model):
        self.model: User = model
        
    def check_user_exists(self, username: str) -> bool:
        query = db_session.query(User).where(self.model.username==username).all()
        if len(query) > 0:
            return True
        return False
    
    def get_user_type(self, value):
        """
        Return appropriate User roles
        """
        if UserType.Employee.value == value:
            return UserType.Employee
        if UserType.TeamLead.value == value:
            return UserType.TeamLead
        if UserType.Manager.value == value:
            return UserType.Manager
        return 0
    
    def post(self):
        try:
            serializer = UserRegisterSerializer(**request.json)
        except (AttributeError, TypeError) as e:
            # generated by serialier
            return jsonify(message="Invalid fields username, role"), 400
        
        # check user existence
        if self.check_user_exists(serializer.username):
            return jsonify(message="User name taken"), 302
        
        # check password length
        if len(serializer.password) < 8:
            return jsonify(message="Password must be atleast digit"), 400
        
        # check user role
        user_role = self.get_user_type(serializer.role)
        if not user_role:
            return jsonify(message="Invalid user role."), 400
        
        # add user
        user = self.model(
            username=serializer.username, 
            password=User.make_passsword(serializer.password),
        )
        user.role = user_role
        db_session.add(user)
        db_session.commit()
        
        return jsonify(message="User created successfully"), 201
    




def register_api(app: Blueprint, model: User, name: str, view_class=None):
    app.add_url_rule(f'/{name}', view_func=view_class.as_view(f"user-{name}", model))
    
        

register_api(bp, User, 'register', RegisterView)